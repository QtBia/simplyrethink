-# Reading Data Basic

# Getting to Know ReQL

RethinkDB uses a special syntax call *ReQL* to interact with the data. ReQL is
chainable. You start with a table, and chain to other API to get what you want,
in a way very natural. Eg:

    r.db("test").table('movie').filter({'type': 'anime'})

Don't worry about the syntax, just look at it again and even without any
knowledge you know what it does and easily remember it. A way, for me, to
understand ReQL is that every command return an object which can be pass into
next command. 

ReQL is particular binding to your language. Though, of course, they will look 
familiar between different language to maintain consitent look and feel. But, 
they are different. Those querie are constructed by making function call of your
language, not by concat SQL String, or not by special JSON object like MongoDB.
Therefore, it feel very natualy to write ReQL. As if the data we manipulate
is an object or data type in our language. 

What is `r`? `r` is like a special namespace which is all RethinkDB is exposed 
via it. It's just a normal variable in your language, or a namespace, a package
name, a module. Think of `r` like `$` of jQuery. If you don't like `r`, assign
another variable to it is possible.

We will call all method of `r`, or of any method of return resulted from other
method are command for now. Think of it like a method in jQuery world.

Here is example, with this HTML structure:

    <div class="db">
      <div class="table" data-type="anime">Haru River</div>
      <div class="table" data-type="anime">Bakasara</div>
      <div class="table" data-type="movie">James Bond</div>
    </div>

To filter only anime movie, we can use this jQuery:

    $('.db').find('.table').filter('[data-type="anime"]')

If we have a database call `db`, and a table call `table`, with 3 records:

    {type: 'anime', title: 'Haru River'}
    {type: 'anime', title: 'Bakasara'}
    {type: 'movie', title: 'James Bond'}

The equavilent ReQL use to find only anime is:

    r.db('db').table('table').filter({type: 'anime'})

Notice how similar the structure between them? Because of those concept, I find
ReQL is easy to learn.

Another way to understand is considering ReQL like the pipe on Linux, you select the data, 
passing into another command:

    $ cd db; ls -la table/* | grep 'type: anime'

# Drivers

ReQL is binded to your language. Therefore, the API is implemented totally by
the driver itself. You won't work directly with RethinkDB server. You write the
query from the API of driver, the driver will built it into a real query to send
to server, receive data, parse it to return data as a native data of your
language.

RethinkDB supports 3 official drives:
 
* Ruby
* NodeJS
* Python 

These support all [driver specifications](http://rethinkdb.com/docs/driver-spec/). The community drives such as Go, PHP probably won't support them all, if you used a different language and find something isn't right, it is probably not your fault.

All ReQL starts with `r`, its top level module to expose its public API. In
NodeJS, we can use

    var r = require('rethinkdb')

or Ruby

    require 'rethinkdb'
    include RethinkDB::Shortcuts
    puts r.inspect

or in Go Lang

    import (
      r "github.com/dancannon/gorethink"
    )

Once we constructed ReQL with `r`, we have to call `run` method to execute it. The
command will be submit to an active database connection. The database connection
can be establish with `connect`.

    var r = require('rethinkdb')
    var connection = r.connect({
      host: '127.0.0.1', 
      port: '28015', 
      db: 'test'
    }, function (err, conn) {
      r.db('db').table('table').filter({type: 'anime'})
    })

When creating the connection with `r.connect`, you can pass an `db` parameter to
specify a default database to work on once connecting succesfully. It's similar
to the current database of MySQL. Without setting this parameter, RethinkDB
assumes `test` as default database. 

To understand more, let looks at Go Lang driver[^golang]

   var connection *r.Session

    connection, err := r.Connect(r.ConnectOpts{
        Address:  "localhost:28015",
        Database: "test",
    })

    if err != nil {
        log.Fatalln(err.Error())
    }

Notice that we don't have any host, or Database parameter now. They are
`Address`and `Database` in Go Lang driver. Therefore, by using an un-official
language, the API will be totally different with official API. 

That's how beautiful it is because each language has its own design philosophy.
Such as in Go lang, we cannot have a lower case field of a struct and expect it 
publicly available to outside. Using names such as `host` or `db` for connection
option is impossible in Go lang.

[^golang]: [https://github.com/dancannon/gorethink](https://github.com/dancannon/gorethink)

## Default database

Similar to MySQL, when you can issue `use database_name` to switch to another
database. We can do that in RethinkDB by calling `use` command on a connection
object.

    connection.use('another_db')      

In this small book, most of the time, we will use Data Exploer. Therefore 
we can use r without initialization and calling `run` method. *Data Exploer*
will do that for us. Just keep in mind when you write code, you have to connect,
and explicitly call `run` to, obviously, run the query.

Note that you don't have to switch to another database to access its table, you
can just call `r.db('another_db')` before building query.

# Data Type

Each ReQL method can be call on one or many above data types. Take `update` command, when you browser the API
document, you see

    table.update(json | expr[, {durability: "hard", returnVals: false, nonAtomic: false}]) → object

    selection.update(json | expr[, {durability: "hard", returnVals: false, nonAtomic: false}]) → object

    singleSelection.update(json | expr[, {durability: "hard", returnVals: false, nonAtomic: false}]) → object

It means the command can be invoked on a table, or selection (eg: first 30
element of tables), or a single selection - a document is an example of single
selection.


In RethinkDB, we have several data type. We will focus into those 2 kind for
now:

* Basic data type
* Composite data type

## Basic data type

There are usually the native data type in your language too:

    * Number: any real numbers. RethinkDB uses double precision (64-bit) floating point numbers internally
    * String
    * Time: This is native RethinkDB date time type. However, they will be converted automatically to your native data type in your language by the driver.
    * Boolean: True/False 
    * Null: Depend on your language, it can be nil, null,..    
    * Object: any valid JSON object. In JavaScript, it will be a normal object. In Ruby, it can be a hash.
    * Array: any valid JSON array.

The data type of a field or column can be change. If you assign a `number` to a
field, you can still assign an value with different data type to that same
field. So we don't have a static schema for tables.

## Composite data type

Taking direcly from RethinkDB doc, we have 3 composite data types.

* Streams 

:are lists like arrays, but they're loaded in a lazy fashion. Operations that return streams return a cursor. A cursor is a pointer into the result set. Instead of reading the results all at once like an array, you loop over the results, retrieving the next member of the set with each iteration. This makes it possible to efficiently work with large result sets. (See "Working with Streams," below, for some tips.) Streams are read-only; you can't pass one as an input to an ReQL command meant to modify its input like update or delete.

* Selections represent subsets of tables, for example, the return values of filter or get. There are two kinds of selections, Selection<Object> and Selection<Stream>, which behave like objects or streams respectively. The difference between selections and objects/streams are that selections are writable--their return values can be passed as inputs to ReQL commands that modify the database. For instance, the get command will return a Selection<Object> that could then be passed to an update or delete command.

* Tables are RethinkDB database tables. They behave like selections—they're writable, as you can insert and delete documents in them. ReQL methods that use an index, like getAll, are only available on tables.


T> Sequence
T>
T> RethinkDB document use `sequence` in lots of places. It's a particular data
T> type. You can think of it as an shortwords for all: strams, table, seletion


# Selecting data

In this section, we will learn how to get data out of RethinkDB. Most of the
time, we will choose a db to work with, and chain into command `table`. 

## Select the whole table

Let's get all data in table `county_stat` of database `test` which we imported
before. This is same as `SELECT * FROM table` in SQL.

    r.db('tets').table('input_polls')

    [
      {
      "Date":  "Jan 16" ,
      "Day": 14 ,
      "Dem": 50 ,
      "EV": 12 ,
      "GOP": 39 ,
      "Len": 5 ,
      "Pollster":  "SurveyUSA-5" ,
      "id":  "Washington" ,
      "uuid":  "0670d6e4-7b56-4259-b5f2-4dbc5186fcca"
      } ,
      {
      "Date":  "Apr 05" ,
      "Day": 93.5 ,
      "Dem": 47 ,
      "EV": 15 ,
      "GOP": 47 ,
      "Len": 4 ,
      "Pollster":  "Marist Coll.-4" ,
      "id":  "North Carolina" ,
      "uuid":  "0788843d-a342-4402-9c47-f6522e7bc216"
      } ,
      {
      "Date":  "May 14" ,
      "Day": 131.5 ,
      "Dem": 49 ,
      "EV": 14 ,
      "GOP": 39 ,
      "Len": 6 ,
      "Pollster":  "Quinnipiac U.-6" ,
      "id":  "New Jersey" ,
      "uuid":  "08acce74-9d7d-4baa-a0ee-2b5d6520ae82"
      } ,
      ...
    ]

You should get back an array of JSON object. By default, the data explorer will
automatically paginate it and display a part of data.

Typing `r.db(db_name)` all the time is insane. We can drop it to use `r.table()`
without calling `r.db()` if the table is in current selected database. Without 
any indication, the default database is `test`. On Data Exploer, without a 
`r.db` command, RethinkDB will use `test` as default database. 

## Select a single document by its primary key

To select a single element, we call `get` on a table, and passing its primary
key value.

    r.table('input_polls').get('08acce74-9d7d-4baa-a0ee-2b5d6520ae82')
    # will return
    {
      "Date":  "May 14" ,
      "Day": 131.5 ,
      "Dem": 49 ,
      "EV": 14 ,
      "GOP": 39 ,
      "Len": 6 ,
      "Pollster":  "Quinnipiac U.-6" ,
      "id":  "New Jersey" ,
      "uuid":  "08acce74-9d7d-4baa-a0ee-2b5d6520ae82"
    }

> Note: This time, we drop `.db('test')` and just use `r.table()`. It's shorter
> and it works. If you are working on database `test` and want to access table
> in database `db1`, u have to use `r.db('db1').table(...)`

Every document in RethinkDB has to include a primary field, its value is
unique across cluster and is used to identify the document. The name of primary 
field is `id` by default. However, when you create a table, you have an option to change name of primary field.
Like in above table, the primary field's name is `*uuid*`, not `*id*`. We will learn
more about it later. Just keep a note here.

In RethinkDB, using of incremental primary key isn't recommended because that's
hard in a cluster environment. To make sure
the uniqueness of the new value, We have to check in every clusters
somehow. RethinkDB team decides[^pr] to use an universal unique[^uuidinfo] id instead of an
incremental value.

[^pr]: [http://stackoverflow.com/questions/21020823/unique-integer-counter-in-rethinkdb](http://en.wikipedia.org/wiki/Universally_unique_identifier)
[^uuidinfo]: [http://en.wikipedia.org/wiki/Universally_unique_identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)

## Select many document by value of fields

We used **filter** method, and passing an object with expected value.
Let's find all poll on May 14.

    r.table('input_polls').filter({day: 'May 14'})
    #=>  
    [
        {
        "Date":  "May 14" ,
        "Day": 131.5 ,
        "Dem": 49 ,
        "EV": 14 ,
        "GOP": 39 ,
        "Len": 6 ,
        "Pollster":  "Quinnipiac U.-6" ,
        "id":  "New Jersey" ,
        "uuid":  "08acce74-9d7d-4baa-a0ee-2b5d6520ae82"
        } ,
        {
        "Date":  "May 14" ,
        "Day": 134 ,
        "Dem": 43 ,
        "EV": 15 ,
        "GOP": 51 ,
        "Len": 1 ,
        "Pollster":  "Rasmussen-1" ,
        "id":  "North Carolina" ,
        "uuid":  "b3d2024b-92c0-4852-bb8c-50c10591cac3"
        }
    ]    


Not just that, if we pass many value into `filter`, it will be filter as well. 

    r.table('input_polls').filter({Date: 'May 14', Day: 134})
    #=>  
    [
        {
        "Date":  "May 14" ,
        "Day": 134 ,
        "Dem": 43 ,
        "EV": 15 ,
        "GOP": 51 ,
        "Len": 1 ,
        "Pollster":  "Rasmussen-1" ,
        "id":  "North Carolina" ,
        "uuid":  "b3d2024b-92c0-4852-bb8c-50c10591cac3"
        }
    ]    

With simple filterting, we can easily pass an filter object as above. But what
up with complex searching? Like we want to find all polls happen in May, and
have the GOP greater than 30

    r.tablle()

If you notice, we did't specify any fields in all our above query. That's bad.
We don't need to rob what we don't want. Let's narrow down them

    r.table()
      .pluck()

How about if we want to get only a single fields, like we want to get a list of
id of input_polls. `pluck` works of course, but we have a shortcut here

    r.table('input_polls')(field)

`filter` seems handy but it's actually limited. `filter` didn't leverage index.
It scan and hold all data in memory. Of course, this isn't scale infinite. Only
100,000 record can be filter.

A thing you should know is RethinkDB doesn't order docuement based on time they
are inserted by default. The order seems in an unpredicted way. In MySQL, for
example, even without any index, the default order will be exactly same as you
insrted the document. However, in RethinkDB it doesn't. I guess this is because
it's distributed.

Also, because ReQL is built into your language. You can do many amazing thing
without had to deal to crete ugly and complex SQL. 

Look at our `input_polls` table, we want to filter only the poll happen on
Sunday in Minnesota, and all the poll on Monday at Virginia.

    r.table('input_polls').filter(
		  r.js("(function (p) { var d = new Date(Date.parse(p.Date + ' 2014')); return p.id=='Minnesota' && d.getDay()==0;})")
    )

    r.table('input_polls').filter(
		  r.js("(function (p) { var d = new Date(Date.parse(p.Date + ' 2014')); return (p.id=='Minnesota' && d.getDay()==0) || (p.id=='Virgina' && d.getDay()==2) ;})")
    )

The syntax may ugly at this moment because we have to pass the JavaScript code
as a single string. But the potential is huge. Those kind of tricky query can
get hard with SQL. Now we can simply explain in our own language with eventually
complex business logic rule

We will learn more about advanced query in other chapter. For now, let's move on
and try to write some data into RethinkDB.


### List

Same as in MySQL, we can use `SHOW DATABASES` to see a list of database. In
RethinkDB, we can do that with `dbList`

    r.dbList()
    //=>
    [

        "test" ,
        "phim365" ,
        "yelp" ,
        "epiphy_test_v001" ,
        "crawler"
    ]

### Select

Before doing anything, we have to select a database with `r.db`.

    r.db('test').table()







## What did we gain

We now have some basic understanding:

1. ReQL always starts with `r`.
2. ReQL is tie to your language depend on language driver.
3. 
3. Find an document by its primary 
4. Access table data and filter data by some condition

If anything you don't understand, or not sure, please re-read this chapter.
